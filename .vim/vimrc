let mapleader =" "
let maplocalleader =","


call plug#begin('~/.vim/plugged')
" Global
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'

" Writing/Authoring Tools
Plug 'reedes/vim-pencil'
Plug 'plasticboy/vim-markdown'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'


" Development Tools
"Plug 'jreybert/vimagit'
Plug 'vimwiki/vimwiki'
Plug '777uliahshafar/vim-myhelp'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'mattn/emmet-vim'
Plug 'w0rp/ale'
Plug 'rhysd/vim-grammarous'
Plug 'tpope/vim-surround'
Plug 'kshenoy/vim-signature'
Plug 'Konfekt/FastFold'
Plug 'lervag/vimtex'
Plug 'justinmk/vim-sneak'
Plug 'sirver/ultisnips'
Plug 'junegunn/vim-easy-align'

" Statistic Prog. Tools
Plug 'jalvesaq/Nvim-R', {'branch': 'stable'}

call plug#end()

" -   -   -   -   -   -   -   -
"   FUNCTION
"
" -   -   -   -   -   -   -   -
syntax enable

" COLOR SCHEME
" Molokai settings
let g:molokai_original = 1
let g:rehash256 = 1

" Determine main color scheme
set termguicolors "enable true color vim
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
colorscheme mac_classic

"switch colorscheme
"
nnoremap <silent> <F5> :exec "color " .
    \ ((g:colors_name == "mac_classic") ? "molokai" : "mac_classic")<CR>

" -   -   -   -   -   -   -   -
"   Some Basic Configuration
"
" -   -   -   -   -   -   -   -
	set nocompatible
	set number
	syntax on
	set encoding=utf-8
	filetype plugin indent on
	set visualbell
	set title
	set shortmess=atI
	set tabstop=4
	set shiftwidth=4
	set expandtab
    set laststatus=2

" Status line(bar) VIM
set statusline=
set statusline+=%#DiffAdd#%{(mode()=='n')?'\ \ NORMAL\ ':''}
set statusline+=%#DiffChange#%{(mode()=='i')?'\ \ INSERT\ ':''}
set statusline+=%#DiffDelete#%{(mode()=='r')?'\ \ RPLACE\ ':''}
set statusline+=%#Cursor#%{(mode()=='v')?'\ \ VISUAL\ ':''}
set statusline+=\ %n\           " buffer number
set statusline+=%#Cursor#               " colour
set statusline+=%#CursorLine#     " colour
set statusline+=%{expand('%:p:h:t')}/%t\
set statusline+=%#Cursor#     " colour
set statusline+=%r                        " readonly flag
set statusline+=%m                        " modified [+] flag
set statusline+=%=              " right align
set statusline+=%#CursorLineNr#   " colour
set statusline+=\ %Y\                   " file type
set statusline+=%#Cursor#   " colour
set statusline+=\ %3p%%\                " percentage
set statusline+=%#CursorLine#       " colour
set statusline+=\ %{wordcount().words}\ words

"Long lines
	set wrap
	"set linebreak

"Ignore case when searching
	set ignorecase

" Map j and k to go down a visual line rather than an actual line
	nnoremap j gj
	nnoremap k gk

"Spell-Check set to <leader>o, 'o' for orthography
    set spellsuggest+=4
	map <leader>o :setlocal spell! spelllang=id<CR>
	map <F7> :setlocal spell! spelllang=en_us<CR>

" Syntax vim-javascript and vim-jsx
let g:jsx_ext_required = 0

" Syntax scss from coc-css
autocmd FileType scss setl iskeyword+=@-@

" Do easyalign for a motion/text object (e.g. gaip)
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" -   -   -   -   -   -   -   -
"  NVIM-R
"
" -   -   -   -   -   -   -   -
" Tabstop using R
    autocmd FileType r setl softtabstop=4 shiftwidth=4 noexpandtab

" Start Automatically R
    let R_auto_start = 2

" Run external terminal emu R
"    let R_external_term = 1

" Emulate Tmux ^az
"    function ZoomWindow()
"        let cpos = getpos(".")
"        tabnew %
"        redraw
"        call cursor(cpos[1], cpos[2])
"        normal! zz
"    endfunction
"    nmap gz :call ZoomWindow()<CR>

function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> gz :ZoomToggle<CR>

" Syntax Highlight in R
    let R_hl_term = 0 " Require command library(colorout) in R

" Open rout file in a new split window
    let R_routnotab = 1

" Use Space for Send Line and lp replace gp
    nmap <leader><Space> <Plug>RDSendLine
    vmap <leader><Space> <Plug>RDSendSelection
    nmap <localleader>lp <Plug>RSyncFor

" Use jk for enter normal mode from terminal mode
    tnoremap jk <C-\><C-n>

" Other remapping
    nmap <localleader>ln <Plug>RNextRChunk
    nmap <localleader>lN <Plug>RPreviousRChunk

" -   -   -   -   -   -   -   -
"   FZF Configuration
"
" -   -   -   -   -   -   -   -
" This is the default extra key bindings of FZF fuzzy finder
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

map <C-f> :Files<CR>
nnoremap <silent> <C-p> :FZF ~/<CR>
map <leader>b :Buffers<CR>
nnoremap <leader>r :Rg<CR>
nnoremap <leader>t :Tags<CR>


"nnoremap <leader>m :Marks<CR> \\used by Vimagit
"map <silent> <unique> <Leader>foo <Plug>RooterChangeToRootDirectory

"if !exists('g:rooter_manual_only') || !g:rooter_manual_only
"   augroup rooter
"     autocmd!
"     autocmd VimEnter,BufEnter * nested Rooter
"     autocmd VimEnter,BufReadPost,BufEnter * nested Rooter
"     autocmd BufWritePost * nested call setbufvar('%', 'rootDir', '') | Rooter
"   augroup END
" endif

 let g:fzf_tags_command = 'ctags -R'
" Border color
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
let $FZF_DEFAULT_COMMAND="rg --files --hidden"


" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'Normal', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"Get Files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)


" Get text in files with Rg
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" Pencil / Writing Controls
let g:pencil#wrapModeDefault = 'soft'

" Vim Pencil
augroup pencil
  autocmd!
  autocmd FileType vimwiki call pencil#init()
  autocmd FileType tex         call pencil#init()
  autocmd FileType rnoweb         call pencil#init()
  autocmd FileType markdown,mkd call pencil#init()
augroup END

" Git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

"Goyo & Limelight
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 248
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#AAAAAA'
	map <leader>g :Goyo<CR>
	let g:goyo_width=68
    let g:limelight_default_coefficient = 0.5
    let g:limelight_paragraph_span = 0

"Goyo Customazation
	function! s:goyo_enter()
  	if executable('tmux') && strlen($TMUX)
   	silent !tmux set status off
    	silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  	endif
    hi CursorLine  guibg=NONE ctermbg=NONE cterm=NONE gui=NONE
"    set number
	set linespace=3
	set scrolloff=999
    Limelight
	endfunction

	function! s:goyo_leave()
  	if executable('tmux') && strlen($TMUX)
    	silent !tmux set status off
    	silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  	endif

	set number
	set linespace=0
	set scrolloff=5
    Limelight!

	endfunction

	autocmd! User GoyoEnter nested call <SID>goyo_enter()
	autocmd! User GoyoLeave nested call <SID>goyo_leave()

"Enable autocompletion:
	set wildmode=longest,list,full

"Splits open at the bottom and right:
	set splitbelow splitright

"Shortcutting split navigation, saving a keypress:
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l

"Runs a script that cleans out tex build files whenever I close out of a .text file
	autocmd VimLeave *.tex !texclear %

" Copy selected text to system clipboard (requires
	set clipboard=unnamed

" Flying with buffer list
	set hidden 	"open other buffer without write the current"
	nnoremap <C-b> :ls<CR>:b<Space>
	nnoremap <Leader>h :bprevious<CR>
	nnoremap <Leader>l :bnext<CR>

"Automatically deletes all trailing whitespace on save.
	autocmd BufWritePre * %s/\s\+$//e

"Ultisnip
	let g:UltiSnipsExpandTrigger = '<nop>'
    	let g:UltiSnipsJumpForwardTrigger = '<tab>'
    	let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
	let g:UltiSnipsEditSplit="vertical"

"ViMagit
"nnoremap <leader>m :MagitOnly<CR>
"autocmd User VimagitEnterCommit startinsert
"autocmd User VimagitEnterCommit setlocal textwidth=72
"autocmd User VimagitLeaveCommit setlocal textwidth=0
"Let ViMagit autoclose when state & unstage empty
"let g:magit_auto_close=1

" -   -   -   -   -   -   -   -
"   Vimwiki and VimMarkdown
"
" -   -   -   -   -   -   -   -
"Ensure files are read as expected
    let g:vimwiki_global_ext=0
	let g:vimwiki_ext2syntax = {'Rmd' : 'markdown', 'rmd' : 'markdown', 'md' : 'markdown', '.markdown' : 'markdown', '.mdown' : 'markdown'}
    let g:vimwiki_list = [{'syntax': 'markdown', 'ext': '.md'}]
    au BufNewFile ~/vimwiki/diary/*.md :silent 0r !~/.vim/bin/generate-vimwiki-diary-template '%'
	au Bufread,BufNewFile *.tex set filetype=tex
    au BufRead,BufNewFile *.Rnw  set filetype=rnoweb.tex
    au Filetype vimwiki call SetWikiOptions()
    function! SetWikiOptions()
        set syntax=markdown
        set cursorline
    endfunction
"Add bold surround command ysiw-
    au Filetype vimwiki let b:surround_45 = "**\r**"

nmap <Leader>ws <Plug>VimwikiSplitLink

" Disable math tex conceal feature
let g:tex_conceal = ''
"let g:vimtex_syntax_conceal_default = 0
let g:vim_markdown_math = 1

" Support front matter of various format
let g:vim_markdown_frontmatter = 1  " for YAML format

function! Compilemd()
        let extension = expand('%:e')
        if extension == "md"
                execute "! pandoc -V geometry:a5paper,margin=17mm -V 'mainfont:Arial' -V linkcolor:blue -V fontsize=26pt --pdf-engine=xelatex % --template=eisvogel -s -o diary/english/englishtask.pdf"
        endif
endfunction

" Use pandoc-latex-template, move file template in pandoc template folder, info pandoc location --v
" https://github.com/Wandmalfarbe/pandoc-latex-template
noremap <leader>lc :call Compilemd()<CR><CR>

" -   -   -   -   -   -   -   -
"  Vim-Sneak Config
"
" -   -   -   -   -   -   -   -
let g:sneak#label = 1

" case insensitive sneak
let g:sneak#use_ic_scs = 1

" immediately move to the next instance of search, if you move the cursor sneak is back to default behavior
let g:sneak#s_next = 1

" remap so I can use , and ; with f and t
map gS <Plug>Sneak_,
map gs <Plug>Sneak_;

" Change the colors
highlight Sneak guifg=black guibg=#00C7DF ctermfg=black ctermbg=cyan
highlight SneakScope guifg=red guibg=yellow ctermfg=red ctermbg=yellow

" Cool prompts
 let g:sneak#prompt = '🔎'

" -   -   -   -   -   -   -   -
"   Basic Coc Configuration File
"   advanced CocConfig file in /.vim
" -   -   -   -   -   -   -   -
"   Coc-explorer
"
" -   -   -   -   -   -   -   -
" Disable netrw.
 let g:loaded_netrw  = 1
 let g:loaded_netrwPlugin = 1
 let g:loaded_netrwSettings = 1
 let g:loaded_netrwFileHandlers = 1

"Enter desirable explorer when enter VIM
"augroup my-fern-startup
"  autocmd! *
"  autocmd VimEnter * ++nested CocCommand explorer
"augroup END
" 	/*OR*/
"	augroup ProjectDrawer
"   	autocmd!
"   	autocmd VimEnter * :CocCommand explorer
" 	augroup END

"Quit Coc Explorer When it's only one buffer left
	autocmd BufEnter * if (winnr("$") == 1 && &filetype == 'coc-explorer') | q | endif

"Opening Coc Explorer
nmap <space>e :CocCommand explorer<CR>


" -   -   -   -   -   -   -   -
"  Linting and Fixing
"
" -   -   -   -   -   -   -   -
" Ale config
let g:ale_disable_lsp = 1
let g:jsx_ext_required = 0

let g:ale_linters = {
\   'javascript': ['standard'],
\   'css': ['prettier'],
\   'scss': ['prettier'],
\   'r': ['lintr'],
\   'markdown': ['languagetool'],
\}

let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'css': ['prettier'],
\   'scss': ['prettier'],
\   'r': ['styler']
\}

let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_lint_on_enter = 0 " Less distracting when opening a new file
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters_explicit = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_options = '--no-semi --single-quote --trailing-comma none'
nnoremap <leader>af :ALEFix<cr>

"Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>

" prettier command for coc
command! -nargs=0 Prettier :CocCommand prettier.formatFile
let g:coc_global_extensions = [
	\ 'coc-snippets',
	\ 'coc-pairs',
	\ 'coc-prettier',
	\ 'coc-tsserver',
	\ 'coc-html',
	\ 'coc-css',
	\ 'coc-json',
	\ 'coc-angular',
    \ 'coc-r-lsp',
	\ 'coc-explorer',
	\ 'coc-vimtex'
	\ ]

" Coc-snippet keybinding
imap <silent> <C-l> <Plug>(coc-snippets-expand)
let g:coc_snippet_prev = '<s-tab>'
let g:coc_snippet_next = '<tab>'

" From Coc Readme
set updatetime=300

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Disable completion suggestions only (disable because already disable in coc-config)
autocmd FileType markdown,tex,rnoweb let b:coc_suggest_disable = 1

" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
			\ pumvisible() ? "\<C-n>" :
			\ <SID>check_back_space() ? "\<TAB>" :
			\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use tab for trigger completion with characters ahead and navigate.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

"autocompletion cite bib trigger by <c-x> <c-o>
"let g:vimtex_complete_bib = {'simple':  '1'}
let g:vimtex_complete_bib= {'match_str_fmt': '@key [@type] @author_all (@year), "@title"'}

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocAction('doHover')
	endif
endfunction

" Remap for rename current word
nmap <rn> <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
	autocmd!
	" Setup formatexpr specified filetype(s).
	autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	" Update signature help on jump placeholder
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" -   -   -   -   -   -   -   -
"     Emmet VIM
"
" -   -   -   -   -   -   -   -
" Redifine leader key for emmet
let g:user_emmet_leader_key=','
" Enable just for html/css
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall


" -   -   -   -   -   -   -   -
"     Vim-Grammarous
"
" -   -   -   -   -   -   -   -

nnoremap <c-g> :GrammarousCheck<cr>
let g:grammarous#languagetool_cmd = 'languagetool'
"    nmap <leader>x <Plug>(grammarous-close-info-window)
let g:grammarous#hooks = {} "Unmap after grammarouscheck
function! g:grammarous#hooks.on_check(errs) abort
    nmap <buffer><C-n> <Plug>(grammarous-move-to-next-error)
    nmap <buffer><C-p> <Plug>(grammarous-move-to-previous-error)
endfunction

function! g:grammarous#hooks.on_reset(errs) abort
    nunmap <buffer><C-n>
    nunmap <buffer><C-p>
endfunction
let g:grammarous#disabled_rules = {
            \ '*' : ['WHITESPACE_RULE', 'EN_QUOTES', 'SENTENCE_WHITESPACE', 'UPPERCASE_SENTENCE_START', 'ARROWS', 'WORD_CONTAINS_UNDERSCORE','COMMA_PARENTHESIS_WHITESPACE','NON_STANDARD_WORD','PUNCTUATION','EN_QUOTES','DOUBLE_PUNCTUATION'],
            \ }

" -   -   -   -   -   -   -   -
"     LaTeX
"
" -   -   -   -   -   -   -   -
" overrule tex trying to be clever and find the difference between latex and plaintex
" (this is useful for when you have chapters/sections of your document in different files)
	let g:tex_flavor = "latex"

" FOLDING
" Folding is took care by LaTex because folding could not deal with large file such latx file.

" Unfolded when first opening file
    au FileType tex,rnoweb,markdown setlocal foldlevel=99
" enable fold
    let g:vimtex_fold_enabled = 1
" incorporate fastfold plugin as developer recommend
    nmap <F6> <Plug>(FastFoldUpdate)

    let g:fastfold_fold_command_suffixes = [] "stop update whenever close or open fold / can slow opening or closing
    let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
    let g:fastfold_savehook = 0 "prevent update fold when saving

" disable mesy latex indentations
	autocmd FileType tex,rnoweb setlocal shiftwidth=0 "
	autocmd FileType tex,rnoweb set autoindent

"Allow backward search from pdf viewer to Vim by start a server
	if has("patch-8.0.475") && empty(v:servername) && exists('*remove_startserver')
	" Then we would like to start the server to we can do callbacks from a PDF
	" viewer into vimtex.
		call remote_startserver('VIM')
	endif

"Shortcutting Vimtex compilation
	function! VimtexLoadShortcuts()
	nmap <buffer> <leader>lc <plug>(vimtex-compile)
	nmap <buffer> <leader>le <plug>(vimtex-errors)
	nmap <buffer> <leader>lv <plug>(vimtex-view)
	nmap <buffer> <leader>ls <plug>(vimtex-toggle-main)
	endfunction

	augroup CompileCommands
 		autocmd FileType tex,latex,bibtex :call VimtexLoadShortcuts()
 	augroup END

"Changes Compiler Engine to new robust Lualates
	let g:vimtex_compiler_latexmk_engines = { '_' : '-lualatex' }

" Compilation with Skim and vimtex
	let g:vimtex_view_method = "skim"
	let g:vimtex_view_general_viewer
        \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
	let g:vimtex_view_general_options = '-r @line @pdf @tex'

" This adds a callback hook that updates Skim after compilation
	let g:vimtex_view_general_viewer
                   \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
             let g:vimtex_view_general_options = '-r @line @pdf'

             " This adds a callback hook that updates Skim after compilation
            let g:vimtex_latexmk_callback_hook = 'UpdateSkim'
            function! UpdateSkim(status)
              if !a:status | return | endif
              let l:out = b:vimtex.out()
              let l:cmd = [g:vimtex_view_general_viewer, '-r']
              if !empty(system('pgrep Skim'))
                call extend(l:cmd, ['-g'])
              endif
              if has('nvim')
                call jobstart(l:cmd + [line('.'), l:out])
              elseif has('job')
                call job_start(l:cmd + [line('.'), l:out])
              else
                call system(join(l:cmd + [line('.'), shellescape(l:out)], ' '))
              endif
            endfunction

"Hide Warning in error windw eg. hbox
let g:vimtex_quickfix_open_on_warning = 0
