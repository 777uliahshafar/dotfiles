let mapleader =" "


call plug#begin('~/.vim/plugged')

"git workflow within m
Plug 'jreybert/vimagit'
Plug 'lambdalisue/fern.vim'
Plug 'morhetz/gruvbox'
Plug 'junegunn/goyo.vim'
Plug 'vimwiki/vimwiki'
Plug 'lervag/vimtex'
Plug 'sirver/ultisnips'
Plug '777uliahshafar/vim-myhelp'

call plug#end()

"gruvbox colorscheme
	autocmd vimenter * colorscheme gruvbox
	let g:scheme_bg = "dark"

	function! ToggleDark()
  	if g:scheme_bg == "dark"
    	set background=light
    	let g:scheme_bg = "light"
  	else
    	set background=dark
    	let g:scheme_bg = "dark"
  	endif
	endfunction

	map <C-b> :call ToggleDark()<CR>


"Some bassics:
	set nocompatible
	set number
	hi LineNr guibg=grey
	syntax on
	set encoding=utf-8
	filetype  plugin on
	set visualbell

" Map j and k to go down a visual line rather than an actual line
	nnoremap j gj
	nnoremap k gk


"Goyo
	let g:goyo_width=90

"Goyo Customazation
	function! s:goyo_enter()
  	if executable('tmux') && strlen($TMUX)
   	silent !tmux set status off
    	silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  	endif
	set nonumber
	set linespace=4
	set scrolloff=999
	endfunction

	function! s:goyo_leave()
  	if executable('tmux') && strlen($TMUX)
    	silent !tmux set status on
    	silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  	endif
	set number
	set linespace=0
	set scrolloff=5
	endfunction

	autocmd! User GoyoEnter nested call <SID>goyo_enter()
	autocmd! User GoyoLeave nested call <SID>goyo_leave()



"Enable autocompletion:
	set wildmode=longest,list,full

"Splits open at the bottom and right:
	set splitbelow splitright

"Shortcutting split navigation, saving a keypress:
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l
"Spell-Check set to <leader>o, 'o' for orthography
	map <leader>o :setlocal spell! spelllang=id<CR>
	map <F6> :setlocal spell! spelllang=en_us<CR>

"Open my bibliography file in split
	map <leader>b :sp<space>*.bib<CR>

"Runs a script that cleans out tex build files whenever I close out of a .text file
	autocmd VimLeave *.tex !texclear %


"Ensure files are read as expected
	let g:vimwiki_ext2syntax = {'Rmd' : 'markdown', 'rmd' : 'markdown', 'md' : 'markdown', '.markdown' : 'markdown', '.mdown' : 'markdown'}
	autocmd Bufread,BufNewFile *.tex set filetype=tex

"Copy selected text to system clipboard (requires
	set clipboard=unnamed

"Automatically deletes all trailing whitespace on save.
	autocmd BufWritePre * %s/\s\+$//e

"Ultisnip
	let g:UltiSnipsExpandTrigger = '<tab>'
    	let g:UltiSnipsJumpForwardTrigger = '<tab>'
    	let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
	let g:UltiSnipsEditSplit="vertical"


" -   -   -   -   -   -   -   -
"    Fern Explorer for vim
" -   -   -   -   -   -   -   -
" Disable netrw.
let g:loaded_netrw  = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_netrwFileHandlers = 1

augroup my-fern-hijack
  autocmd!
  autocmd BufEnter * ++nested call s:hijack_directory()
augroup END

function! s:hijack_directory() abort
  let path = expand('%:p')
  if !isdirectory(path)
    return
  endif
  bwipeout %
  execute printf('Fern %s', fnameescape(path))
endfunction

"Custom settings and mappings
let g:fern#drawer_width = 30
let g:fern#default_hidden = 1
let g:fern#disable_default_mappings = 1

augroup my-fern-startup
  autocmd! *
  autocmd VimEnter * ++nested Fern ~/
augroup END

noremap <silent> <Leader>f :Fern . -drawer -reveal=% -toggle <CR><C-w>

function! FernInit() abort
  nmap <buffer><expr>
        \ <Plug>(fern-my-open-expand-collapse)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open:select)",
        \   "\<Plug>(fern-action-expand)",
        \   "\<Plug>(fern-action-collapse)",
        \ )
  nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> b <Plug>(fern-action-open:split)
  nmap <buffer> v <Plug>(fern-action-open:vsplit)
  nmap <buffer> M <Plug>(fern-action-rename)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> c <Plug>(fern-action-new-copy)
  nmap <buffer> n <Plug>(fern-action-new-path)
  nmap <buffer> h <Plug>(fern-action-hidden-toggle)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> r <Plug>(fern-action-reload)
  nmap <buffer> <leader> <Plug>(fern-action-mark-toggle)
  nmap <buffer><nowait> < <Plug>(fern-action-leave)
  nmap <buffer><nowait> > <Plug>(fern-action-enter)
endfunction

augroup FernGroup
  autocmd!
  autocmd FileType fern call FernInit()
augroup END

" -   -   -   -   -   -   -   -
"     LaTeX
" -   -   -   -   -   -   -   -

" overrule tex trying to be clever and find the difference between latex and plaintex
" (this is useful for when you have chapters/sections of your document in different files)
	let g:tex_flavor = "latex"
	let g:vimtex_fold_enabled = 1

" disable mesy latex indentations
	autocmd FileType tex setlocal shiftwidth=0 "
	autocmd FileType tex set autoindent

"Allow backward search from pdf viewer to Vim by start a server
	if has("patch-8.0.475") && empty(v:servername) && exists('*remove_startserver')
	" Then we would like to start the server to we can do callbacks from a PDF
	" viewer into vimtex.
		call remote_startserver('VIM')
	endif

"Shortcutting Vimtex compilation
	function! VimtexLoadShortcuts()
	nmap <buffer> <leader>lc <plug>(vimtex-compile)
	nmap <buffer> <leader>le <plug>(vimtex-errors)
	nmap <buffer> <leader>lv <plug>(vimtex-view)
	nmap <buffer> <leader>ls <plug>(vimtex-toggle-main)
	endfunction

	augroup CompileCommands
 		autocmd FileType tex,latex,bibtex :call VimtexLoadShortcuts()
 	augroup END

" Compilation with Skim and vimtex
	let g:vimtex_view_method = "skim"
	let g:vimtex_view_general_viewer
        \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
	let g:vimtex_view_general_options = '-r @line @pdf @tex'

" This adds a callback hook that updates Skim after compilation
	let g:vimtex_view_general_viewer
                   \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
             let g:vimtex_view_general_options = '-r @line @pdf'

             " This adds a callback hook that updates Skim after compilation
            let g:vimtex_latexmk_callback_hook = 'UpdateSkim'
            function! UpdateSkim(status)
              if !a:status | return | endif
              let l:out = b:vimtex.out()
              let l:cmd = [g:vimtex_view_general_viewer, '-r']
              if !empty(system('pgrep Skim'))
                call extend(l:cmd, ['-g'])
              endif
              if has('nvim')
                call jobstart(l:cmd + [line('.'), l:out])
              elseif has('job')
                call job_start(l:cmd + [line('.'), l:out])
              else
                call system(join(l:cmd + [line('.'), shellescape(l:out)], ' '))
              endif
            endfunction

"Hide Warning in error windw eg. hbox
let g:vimtex_quickfix_open_on_warning = 0


" -   -   -   -   -   -   -   -
"     Zotero Bibliography - Cite as You write
" -   -   -   -   -   -   -   -
"	function! ZoteroCite()
  " pick a format based on the filetype (customize at will)
 " 	let format = &filetype =~ '.*tex' ? 'cite' : 'pandoc'
  "	let api_call = 'http://127.0.0.1:23119/better-bibtex/cayw?format='.format.'&brackets=1'
"	let ref = system('curl -s '.shellescape(api_call))
 " 	return ref
"	endfunction

"	inoremap <leader>z <C-r>=ZoteroCite()<CR>


