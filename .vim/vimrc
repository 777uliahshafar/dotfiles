let mapleader =" "


call plug#begin('~/.vim/plugged')

"git workflow within m
Plug 'jreybert/vimagit'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'
Plug 'morhetz/gruvbox'
Plug 'junegunn/goyo.vim'
Plug 'vimwiki/vimwiki'
Plug 'lervag/vimtex'
Plug 'sirver/ultisnips'
Plug '777uliahshafar/vim-myhelp'

call plug#end()

"gruvbox colorscheme
	autocmd vimenter * colorscheme gruvbox
	let g:scheme_bg = "dark"

	function! ToggleDark()
  	if g:scheme_bg == "dark"
    	set background=light
    	let g:scheme_bg = "light"
  	else
    	set background=dark
    	let g:scheme_bg = "dark"
  	endif
	endfunction

	map <C-b> :call ToggleDark()<CR>


"Some bassics:
	set nocompatible
	set number
	hi LineNr guibg=grey
	syntax on
	set encoding=utf-8
	filetype  plugin on
	set visualbell

" Map j and k to go down a visual line rather than an actual line
	nnoremap j gj
	nnoremap k gk

" This is the default extra key bindings of FZF fuzzy finder
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

map <C-f> :Files<CR>
map <leader>b :Buffers<CR>
nnoremap <leader>g :Rg<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>m :Marks<CR>


let g:fzf_tags_command = 'ctags -R'
" Border color
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
let $FZF_DEFAULT_COMMAND="rg --files --hidden"


" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"Get Files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)


" Get text in files with Rg
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" Git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

"Goyo
	let g:goyo_width=90

"Goyo Customazation
	function! s:goyo_enter()
  	if executable('tmux') && strlen($TMUX)
   	silent !tmux set status off
    	silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  	endif
	set nonumber
	set linespace=4
	set scrolloff=999
	endfunction

	function! s:goyo_leave()
  	if executable('tmux') && strlen($TMUX)
    	silent !tmux set status on
    	silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  	endif
	set number
	set linespace=0
	set scrolloff=5
	endfunction

	autocmd! User GoyoEnter nested call <SID>goyo_enter()
	autocmd! User GoyoLeave nested call <SID>goyo_leave()



"Enable autocompletion:
	set wildmode=longest,list,full

"Splits open at the bottom and right:
	set splitbelow splitright

"Shortcutting split navigation, saving a keypress:
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l
"Spell-Check set to <leader>o, 'o' for orthography
	map <leader>o :setlocal spell! spelllang=id<CR>
	map <F6> :setlocal spell! spelllang=en_us<CR>

"Runs a script that cleans out tex build files whenever I close out of a .text file
	autocmd VimLeave *.tex !texclear %


"Ensure files are read as expected
	let g:vimwiki_ext2syntax = {'Rmd' : 'markdown', 'rmd' : 'markdown', 'md' : 'markdown', '.markdown' : 'markdown', '.mdown' : 'markdown'}
	autocmd Bufread,BufNewFile *.tex set filetype=tex

"Copy selected text to system clipboard (requires
	set clipboard=unnamed

"Automatically deletes all trailing whitespace on save.
	autocmd BufWritePre * %s/\s\+$//e

"Ultisnip
	let g:UltiSnipsExpandTrigger = '<tab>'
    	let g:UltiSnipsJumpForwardTrigger = '<tab>'
    	let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
	let g:UltiSnipsEditSplit="vertical"


" -   -   -   -   -   -   -   -
"    COC Explorer for vim
" -   -   -   -   -   -   -   -


" -   -   -   -   -   -   -   -
"     LaTeX
" -   -   -   -   -   -   -   -

" overrule tex trying to be clever and find the difference between latex and plaintex
" (this is useful for when you have chapters/sections of your document in different files)
	let g:tex_flavor = "latex"
	let g:vimtex_fold_enabled = 1

" disable mesy latex indentations
	autocmd FileType tex setlocal shiftwidth=0 "
	autocmd FileType tex set autoindent

"Allow backward search from pdf viewer to Vim by start a server
	if has("patch-8.0.475") && empty(v:servername) && exists('*remove_startserver')
	" Then we would like to start the server to we can do callbacks from a PDF
	" viewer into vimtex.
		call remote_startserver('VIM')
	endif

"Shortcutting Vimtex compilation
	function! VimtexLoadShortcuts()
	nmap <buffer> <leader>lc <plug>(vimtex-compile)
	nmap <buffer> <leader>le <plug>(vimtex-errors)
	nmap <buffer> <leader>lv <plug>(vimtex-view)
	nmap <buffer> <leader>ls <plug>(vimtex-toggle-main)
	endfunction

	augroup CompileCommands
 		autocmd FileType tex,latex,bibtex :call VimtexLoadShortcuts()
 	augroup END

" Compilation with Skim and vimtex
	let g:vimtex_view_method = "skim"
	let g:vimtex_view_general_viewer
        \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
	let g:vimtex_view_general_options = '-r @line @pdf @tex'

" This adds a callback hook that updates Skim after compilation
	let g:vimtex_view_general_viewer
                   \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
             let g:vimtex_view_general_options = '-r @line @pdf'

             " This adds a callback hook that updates Skim after compilation
            let g:vimtex_latexmk_callback_hook = 'UpdateSkim'
            function! UpdateSkim(status)
              if !a:status | return | endif
              let l:out = b:vimtex.out()
              let l:cmd = [g:vimtex_view_general_viewer, '-r']
              if !empty(system('pgrep Skim'))
                call extend(l:cmd, ['-g'])
              endif
              if has('nvim')
                call jobstart(l:cmd + [line('.'), l:out])
              elseif has('job')
                call job_start(l:cmd + [line('.'), l:out])
              else
                call system(join(l:cmd + [line('.'), shellescape(l:out)], ' '))
              endif
            endfunction

"Hide Warning in error windw eg. hbox
let g:vimtex_quickfix_open_on_warning = 0


" -   -   -   -   -   -   -   -
"     Zotero Bibliography - Cite as You write
" -   -   -   -   -   -   -   -
"	function! ZoteroCite()
  " pick a format based on the filetype (customize at will)
 " 	let format = &filetype =~ '.*tex' ? 'cite' : 'pandoc'
  "	let api_call = 'http://127.0.0.1:23119/better-bibtex/cayw?format='.format.'&brackets=1'
"	let ref = system('curl -s '.shellescape(api_call))
 " 	return ref
"	endfunction

"	inoremap <leader>z <C-r>=ZoteroCite()<CR>


